<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luobbe的随笔</title>
  <icon>https://www.gravatar.com/avatar/f05f3cc6ca6f7f6c2bee7d2e1f0be789</icon>
  <subtitle>生命不息  奋斗不止</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.luobbe.com/"/>
  <updated>2020-04-09T04:04:59.319Z</updated>
  <id>http://blog.luobbe.com/</id>
  
  <author>
    <name>luobbe</name>
    <email>luobbe@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图片添加标签:LBTagView</title>
    <link href="http://blog.luobbe.com/2016/01/15/%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE-LBTagView/"/>
    <id>http://blog.luobbe.com/2016/01/15/图片添加标签-LBTagView/</id>
    <published>2016-01-15T15:16:12.000Z</published>
    <updated>2020-04-09T04:04:59.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>前两天写了一个轮子，主要是给图片视图添加标签的，昨天在微博上艾特<a href="http://weibo.com/onevcat" target="_blank" rel="noopener">喵大</a>、<a href="http://weibo.com/u/1438670852" target="_blank" rel="noopener">叶神</a>和<a href="http://weibo.com/luohanchenyilong" target="_blank" rel="noopener">iOS程序犭袁</a>，然后火了一把，首先我感谢各位对这个小小功能的关注，让我受宠若惊。效果主要是这个样子</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/c9ed1617dffd77ea0138500a2dd26d0b.gif" alt="gif"></p><p>这两天也有小伙伴私信我能不能简单的讲一下其中的原理，其实用到的知识很简单，今天我就简单地说一下原理和实现。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><hr><p>为了方便，我们姑且称这个控件是<code>LBTagView</code>，他的组成主要是一个带有三角形<code>Label</code>、一个小圆点的<code>UIView</code>和<code>CALayer</code>逐渐放大的圆环。三角形的<code>Label</code>是用<code>CAShapeLayer</code>结合<code>UIBezierPath</code>画出来的，大致的原理就是这样的，下面我们来把主要的步骤实现一下。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><hr><ul><li>三角形的<code>Label</code></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)triangle:(<span class="built_in">UILabel</span> *)label</span><br><span class="line">&#123;</span><br><span class="line">    [label.layer.sublayers makeObjectsPerformSelector:<span class="keyword">@selector</span>(removeFromSuperlayer)];</span><br><span class="line">    <span class="built_in">CGFloat</span> angleWidth = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">UIBezierPath</span>  * path =  [ <span class="built_in">UIBezierPath</span>  new ];</span><br><span class="line">    [path moveToPoint :( <span class="built_in">CGPoint</span> ) &#123; angleWidth ,  <span class="number">0</span> &#125;];</span><br><span class="line">    [path addLineToPoint :( <span class="built_in">CGPoint</span> ) &#123; <span class="number">0</span>, <span class="built_in">CGRectGetHeight</span>(label.frame)/<span class="number">2.0</span>&#125;];</span><br><span class="line">    [path addLineToPoint :( <span class="built_in">CGPoint</span> ) &#123; angleWidth, <span class="built_in">CGRectGetHeight</span>(label.frame)&#125;];</span><br><span class="line">    [path addLineToPoint :( <span class="built_in">CGPoint</span> ) &#123; <span class="built_in">CGRectGetWidth</span>(label.frame), <span class="built_in">CGRectGetHeight</span>(label.frame)&#125;];</span><br><span class="line">    [path addLineToPoint :( <span class="built_in">CGPoint</span> ) &#123; <span class="built_in">CGRectGetWidth</span>(label.frame), <span class="number">0</span>&#125;];</span><br><span class="line">    [path addLineToPoint :( <span class="built_in">CGPoint</span> ) &#123; angleWidth, <span class="number">0</span>&#125;];</span><br><span class="line">    <span class="built_in">CAShapeLayer</span>* mask = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">    mask.path = path.CGPath ;</span><br><span class="line">    label.layer.mask = mask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些代码所要达到的效果大概如下，其实显示的主要是<code>CAShapeLayer</code>所在红框部分的内容<a id="more"></a>:</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/e4adf6312615295f5fef7e6ba25c0891.jpg" alt=""></p><ul><li><code>CALayer</code>的动画</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)circleAnimation:(<span class="built_in">CALayer</span> *)layer</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CAAnimationGroup</span> *animationGroup = [<span class="built_in">CAAnimationGroup</span> animation];</span><br><span class="line">    animationGroup.repeatCount = HUGE_VALF;</span><br><span class="line">    [animationGroup setDuration:<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">CAMediaTimingFunction</span> *timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseOut];</span><br><span class="line">    animationGroup.timingFunction = timingFunction;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CABasicAnimation</span> *fadeAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</span><br><span class="line">    fadeAnimation.fromValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.5</span>];</span><br><span class="line">    fadeAnimation.toValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CABasicAnimation</span> *scaleAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</span><br><span class="line">    scaleAnimation.fromValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">1</span>];</span><br><span class="line">    scaleAnimation.toValue = [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">5</span>];</span><br><span class="line">    animationGroup.animations = [<span class="built_in">NSArray</span> arrayWithObjects:fadeAnimation, scaleAnimation, <span class="literal">nil</span>];</span><br><span class="line">    [layer addAnimation:animationGroup forKey:<span class="string">@"fadeAnimation"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些代码主要实现的是<code>CALayer</code>的放大和<code>opacity</code>值的变化，并且是一直重复的。</p><ul><li><code>LBTagView</code>大小的确定<br>这个环节我设计的是在设置<code>Label</code>的<code>text</code>的时候用系统自带的方法<code>sizeToFit</code>来确定<code>Label</code>的大致大小，然后适当地放大<code>Label</code>的宽高，看起来比较和谐点，然后每次设置<code>text</code>都会把之前的<code>CAShapeLayer</code>删除，在重新创建新的<code>CAShapeLayer</code>，这就解决了<code>LBTagView</code>大小的问题了，也就是说我们只需要指定<code>LBTagView</code>的位置就行了，大小是由<code>Font</code>来控制的。</li><li><code>LBTagView</code>移动<br>我们需要使用到<code>UIResponder</code>中的方法:</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">- (<span class="keyword">void</span>)touchesMoved:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br></pre></td></tr></table></figure><p>在<code>touchesBegan</code>记录一下开始的触摸点<code>lastPoint</code>，然后在<code>touchesMoved</code>获取到当前移动的点<code>point</code>具体代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UITouch</span> *touch = [touches anyObject];</span><br><span class="line">   <span class="built_in">CGPoint</span> currentPint = [touch locationInView:<span class="keyword">self</span>.superview];</span><br><span class="line">   <span class="keyword">self</span>.center = <span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.center.x + currentPint.x - lastPoint.x, <span class="keyword">self</span>.center.y + currentPint.y - lastPoint.y);</span><br><span class="line">   lastPoint = currentPint;</span><br></pre></td></tr></table></figure><p>为了方便的、符合自己需求的使用<code>LBTagView</code>我又在<code>LBTagView.h</code>中添加了可以修改<code>LBTagView</code>样式的属性，如下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//is can be moved</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> canMove;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//text</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *text;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//default [UIColor whiteColor]</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *textColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//default [UIFont systemFontOfSize:12]</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIFont</span> *font;</span><br><span class="line"></span><br><span class="line"><span class="comment">//default [UIColor colorWithRed:0 green:0 blue:0 alpha:0.5]</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *backgroundColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//default [UIColor colorWithRed:1 green:1 blue:1 alpha:0.8]</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *circlrColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//default [UIColor colorWithRed:0 green:0 blue:0 alpha:0.7]</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *circlrShadowColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tap action</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UITapGestureRecognizer</span> *tapGestureRecognizer;</span><br></pre></td></tr></table></figure><p>也就是说显示层面的都可以自定义，这样就非常方便和灵活了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><hr><p>使用的时候，非常简单，最低只需要三行代码就可以搞定给图片添加标签的功能了：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LBTagView *tag = [[LBTagView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">50</span>, <span class="number">300</span>, <span class="number">0</span>, <span class="number">0</span>)];</span><br><span class="line">tag.text = <span class="string">@"hello world"</span>;</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:tag];</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><hr><p>一个简单但是在购物平台或者自拍平台又很主流的功能就这么诞生了，功能很简单，实现也不难。通过这两天看大家在<a href="http://www.weibo.com/luobbe" target="_blank" rel="noopener">微博</a>的转发和<a href="https://github.com/lovels" target="_blank" rel="noopener">Github</a>的star，我非常感谢，希望以后能写出更多好用的代码，与大家一起分享。本文<a href="https://github.com/lovels/LBTagView" target="_blank" rel="noopener">Demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;前两天写了一个轮子，主要是给图片视图添加标签的，昨天在微博上艾特&lt;a href=&quot;http://weibo.com/onevcat&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;喵大&lt;/a&gt;、&lt;a href=&quot;http://weibo.com/u/1438670852&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;叶神&lt;/a&gt;和&lt;a href=&quot;http://weibo.com/luohanchenyilong&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iOS程序犭袁&lt;/a&gt;，然后火了一把，首先我感谢各位对这个小小功能的关注，让我受宠若惊。效果主要是这个样子&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/c9ed1617dffd77ea0138500a2dd26d0b.gif&quot; alt=&quot;gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;这两天也有小伙伴私信我能不能简单的讲一下其中的原理，其实用到的知识很简单，今天我就简单地说一下原理和实现。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;为了方便，我们姑且称这个控件是&lt;code&gt;LBTagView&lt;/code&gt;，他的组成主要是一个带有三角形&lt;code&gt;Label&lt;/code&gt;、一个小圆点的&lt;code&gt;UIView&lt;/code&gt;和&lt;code&gt;CALayer&lt;/code&gt;逐渐放大的圆环。三角形的&lt;code&gt;Label&lt;/code&gt;是用&lt;code&gt;CAShapeLayer&lt;/code&gt;结合&lt;code&gt;UIBezierPath&lt;/code&gt;画出来的，大致的原理就是这样的，下面我们来把主要的步骤实现一下。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;三角形的&lt;code&gt;Label&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)triangle:(&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *)label&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [label.layer.sublayers makeObjectsPerformSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(removeFromSuperlayer)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; angleWidth = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIBezierPath&lt;/span&gt;  * path =  [ &lt;span class=&quot;built_in&quot;&gt;UIBezierPath&lt;/span&gt;  new ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [path moveToPoint :( &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; ) &amp;#123; angleWidth ,  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [path addLineToPoint :( &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; ) &amp;#123; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(label.frame)/&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [path addLineToPoint :( &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; ) &amp;#123; angleWidth, &lt;span class=&quot;built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(label.frame)&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [path addLineToPoint :( &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; ) &amp;#123; &lt;span class=&quot;built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(label.frame), &lt;span class=&quot;built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(label.frame)&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [path addLineToPoint :( &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; ) &amp;#123; &lt;span class=&quot;built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(label.frame), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [path addLineToPoint :( &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; ) &amp;#123; angleWidth, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CAShapeLayer&lt;/span&gt;* mask = [&lt;span class=&quot;built_in&quot;&gt;CAShapeLayer&lt;/span&gt; layer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mask.path = path.CGPath ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    label.layer.mask = mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些代码所要达到的效果大概如下，其实显示的主要是&lt;code&gt;CAShapeLayer&lt;/code&gt;所在红框部分的内容
    
    </summary>
    
    
      <category term="技术分享" scheme="http://blog.luobbe.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>写在2015年末</title>
    <link href="http://blog.luobbe.com/2015/12/29/%E5%86%99%E5%9C%A82015%E5%B9%B4%E6%9C%AB/"/>
    <id>http://blog.luobbe.com/2015/12/29/写在2015年末/</id>
    <published>2015-12-29T12:21:09.000Z</published>
    <updated>2020-04-09T06:18:21.021Z</updated>
    
    <content type="html"><![CDATA[<p>今天看了喵神的年终总结，感触挺多的。回头看看自己的一年，今天我一直在回忆15年自己做了些什么，索性也来做个记录吧！</p><p>15年对我来说，注定是不平凡的一年！</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>在14年末开始准备App2.0版本的开发工作，到15年初2.0版本的上线，新版本的整个界面风格完全发生了变化，代码从零开始，经过了两个半月的时间，保质保量的完成了新版本的发布！在15年里，App小版本迭代了十多次，基本上是每月一更，另外又开发了两个全新的App，每次开发都去不断尝试新的东西，研究新的技术，让我学到了很多。无论是个人技术的提升，还是团队的管理。</p><h2 id="个人技能"><a href="#个人技能" class="headerlink" title="个人技能"></a>个人技能</h2><p>今年参与开发了三个项目，两个是由我主开发，从项目框架的搭建到代码质量的把控，自己的技能都提升了不少。搭建项目的时候，一定要考虑整个App的布局，一个好的框架能提升不少开发时间的，然后就是基类的封装，在封装一些基类的时候，一定要考虑到共性和特性；网络层的设计，数据存储的设计等。还有一点我感觉最重要的就是代码规范，代码规范，代码规范！！！重要的事情说三遍。好的代码能使我看着舒服，能写注释的尽量写注释，方便以后维护。<a id="more"></a></p><p>平时常去<code>github</code>、个人的技术博客上看看别人写的代码，多接触一些新鲜的技术，这样才能提高自己。年中的时候，整了一个个人的技术博客，静下来没事的时候在写点东西，记录一下学习成长的笔记。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>今年撸了一个<strong>MBP 15’</strong>，又整了一个<strong>Creative live! 2</strong>，业余就泡在电脑上，戴上耳机，享受码农的世界，没事和媳妇一起逛逛街，一起玩玩手游，生活的惬意。但是这样的生活长了，身体素质就有点下降了，最近半年长胖了15斤，我也是惊呆了，哈哈哈哈，体质不如以前了。2016年开始要锻炼身体，开始健康的生活。</p><p>15年过去了，16年会更加努力！！！</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/a425544e67eea9ce814ee7af67179295.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看了喵神的年终总结，感触挺多的。回头看看自己的一年，今天我一直在回忆15年自己做了些什么，索性也来做个记录吧！&lt;/p&gt;
&lt;p&gt;15年对我来说，注定是不平凡的一年！&lt;/p&gt;
&lt;h2 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h2&gt;&lt;p&gt;在14年末开始准备App2.0版本的开发工作，到15年初2.0版本的上线，新版本的整个界面风格完全发生了变化，代码从零开始，经过了两个半月的时间，保质保量的完成了新版本的发布！在15年里，App小版本迭代了十多次，基本上是每月一更，另外又开发了两个全新的App，每次开发都去不断尝试新的东西，研究新的技术，让我学到了很多。无论是个人技术的提升，还是团队的管理。&lt;/p&gt;
&lt;h2 id=&quot;个人技能&quot;&gt;&lt;a href=&quot;#个人技能&quot; class=&quot;headerlink&quot; title=&quot;个人技能&quot;&gt;&lt;/a&gt;个人技能&lt;/h2&gt;&lt;p&gt;今年参与开发了三个项目，两个是由我主开发，从项目框架的搭建到代码质量的把控，自己的技能都提升了不少。搭建项目的时候，一定要考虑整个App的布局，一个好的框架能提升不少开发时间的，然后就是基类的封装，在封装一些基类的时候，一定要考虑到共性和特性；网络层的设计，数据存储的设计等。还有一点我感觉最重要的就是代码规范，代码规范，代码规范！！！重要的事情说三遍。好的代码能使我看着舒服，能写注释的尽量写注释，方便以后维护。
    
    </summary>
    
    
      <category term="杂谈" scheme="http://blog.luobbe.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的shadowsocks分享服务器</title>
    <link href="http://blog.luobbe.com/2015/12/13/shadowsocks-sspanel/"/>
    <id>http://blog.luobbe.com/2015/12/13/shadowsocks-sspanel/</id>
    <published>2015-12-13T13:56:41.000Z</published>
    <updated>2018-01-04T03:03:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#FF785A" size="4.5">本文针对 ss-panel V2 版本的教程，<strong>更新于 2018-1-4</strong></font><br><font color="#FF785A" size="4.5">服务器</font><a href="https://www.vultr.com/?ref=6928081" target="_blank" rel="noopener">vultr</a>、<a href="https://m.do.co/c/fe08bbc0a6c0" target="_blank" rel="noopener">digitalocean</a>，<font color="#FF785A" size="4.5">系统版本 <code>Ubuntu 16.04.3 LTS</code> 上<strong>测试通过</strong></font></blockquote><p>周末本想出去转转，无奈帝都的雾霾太大，只能在家里撸码，整了一个ss账号分享平台，在这记录一下过程吧。</p><p>本文是基于Ubuntu 14.04下使用后端manyuser和前端ss-panel，使用nginx做代理所搭建的。<br>服务器推荐<a href="https://www.vultr.com/?ref=6928081" target="_blank" rel="noopener">vultr</a>、<a href="https://m.do.co/c/fe08bbc0a6c0" target="_blank" rel="noopener">digitalocean</a>。</p><h6 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h6><p>首先我们远程登录服务器，安装nginx,mysql和php,具体命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># apt-get update</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># apt-get install nginx</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># apt-get install mysql-client mysql-server</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># apt-get install php php-fpm php-cli php-cgi php-mysql php-gd</span></span><br></pre></td></tr></table></figure><p>过程中如果没有错误，那就说明我们安装成功了，如果服务器中有这些环境，则可以忽略对应的步骤。</p><p>接下来我们就要创建数据库了，运行<code>mysql -u root -p</code>，输入<code>root</code>密码。开始创建<code>shadowsocks</code>数据库，具体 SQL:<code>create database shadowsocks;</code> 如下图：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/3322f6c7e5155b1e5f862d96f9bb927a.jpg" alt=""></p><p>然后建立一个名为ss，密码为ss的MySQL用户，因为这个用户只能本地登录，所以密码简单点也无所谓：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  grant all privileges on shadowsocks.* to ss@localhost identified by <span class="string">'ss'</span>;</span><br></pre></td></tr></table></figure><p>创建完成我们退出MySQL:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  <span class="built_in">exit</span>；</span><br></pre></td></tr></table></figure><p>到这步，我们的数据库已经完成了。<a id="more"></a>下面我们来安装shadowsocks ss-panel supervisor，一次执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># apt-get install python-pip git python-m2crypto</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># pip install cymysql</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># git clone -b manyuser https://github.com/mengskysama/shadowsocks.git</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># cd shadowsocks/shadowsocks/</span></span><br></pre></td></tr></table></figure><p>如果是服务器上没有git，则需要先安装git，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># pip install git</span></span><br></pre></td></tr></table></figure><p>然后我们来修改配置文件/root/shadowsocks/shadowsocks/Config.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#Config</span><br><span class="line">MYSQL_HOST = &apos;localhost&apos;</span><br><span class="line">MYSQL_PORT = 3306</span><br><span class="line">MYSQL_USER = &apos;ss&apos;</span><br><span class="line">MYSQL_PASS = &apos;ss&apos;</span><br><span class="line">MYSQL_DB = &apos;shadowsocks&apos;</span><br><span class="line">MANAGE_PASS = &apos;ss233333333&apos;</span><br><span class="line">#if you want manage in other server you should set this value to global ip</span><br><span class="line">MANAGE_BIND_IP = &apos;127.0.0.1&apos;</span><br><span class="line">#make sure this port is idle</span><br><span class="line">MANAGE_PORT = 23333</span><br></pre></td></tr></table></figure><p>然后我们还要修改这个文件/root/shadowsocks/shadowsocks/config.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>: <span class="string">"[::]"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"m"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们来导入数据库。进入MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># mysql -u root -p</span></span><br><span class="line">mysql&gt; use shadowsocks;</span><br><span class="line">mysql&gt; <span class="built_in">source</span> /root/shadowsocks/shadowsocks/shadowsocks.sql;</span><br><span class="line">mysql&gt; <span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure><p>导入数据库之后，我们在shadowsocks目录下运行一下server.py，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># cd shadowsocks/shadowsocks/</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># python server.py</span></span><br></pre></td></tr></table></figure><p>没有error的话，ctrl + c结束进程，我们进行下一步,安装守护进程，这样重启以后或者程序崩了还能自己重启。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># apt-get install python-pip python-m2crypto supervisor</span></span><br></pre></td></tr></table></figure><p>然后我们需要新建两个文件，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># vim /etc/supervisor/conf.d/shadowsocks.conf</span></span><br></pre></td></tr></table></figure><p>具体内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[program:shadowsocks]</span><br><span class="line">command=python /root/shadowsocks/shadowsocks/server.py -c /root/shadowsocks/shadowsocks/config.json</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br></pre></td></tr></table></figure><p>再创建一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># vim /etc/supervisor/conf.d/cgi.conf</span></span><br></pre></td></tr></table></figure><p>具体内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[program:cgi]</span><br><span class="line">command=php-cgi -b localhost:9000</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br></pre></td></tr></table></figure><p>然后命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># cd shadowsocks/shadowsocks</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># service supervisor start</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># supervisorctl reload</span></span><br></pre></td></tr></table></figure><p>在以下两个文件<code>/etc/profile</code>和<br><code>/etc/default/supervisor</code>结尾添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n 51200</span><br><span class="line">ulimit -Sn 4096</span><br><span class="line">ulimit -Hn 8192</span><br></pre></td></tr></table></figure><p>至此ss的后端服务已经搞定了，现在我们来整前端界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~# cd /usr/share/nginx/</span><br><span class="line">root@ubuntu-512mb-sfo1-01:~# git clone -b v2 https://github.com/orvice/ss-panel.git</span><br></pre></td></tr></table></figure><p>重命名文件夹,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~# mv ss-panel ss</span><br></pre></td></tr></table></figure><p>现在来修改文件夹权限,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># cd /usr/share/nginx/</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># chmod 777 * -R /usr/share/nginx/html</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># chmod 777 * -R /usr/share/nginx/ss</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># chown -R www-data:www-data /usr/share/nginx/html</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># chown -R www-data:www-data /usr/share/nginx/ss</span></span><br></pre></td></tr></table></figure><p>然后我们需要将ss-panel中的数据库导入我们刚刚创建的数据库中，还是进入MySQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~# mysql -u root -p</span><br><span class="line">mysql&gt; use shadowsocks;</span><br><span class="line">mysql&gt; source /usr/share/nginx/ss/sql/invite_code.sql;</span><br><span class="line">mysql&gt; source /usr/share/nginx/ss/sql/ss_user_admin.sql;</span><br><span class="line">mysql&gt; source /usr/share/nginx/ss/sql/ss_node.sql;</span><br><span class="line">mysql&gt; source /usr/share/nginx/ss/sql/ss_reset_pwd.sql;</span><br><span class="line">mysql&gt; source /usr/share/nginx/ss/sql/user.sql;</span><br><span class="line">mysql&gt; exit;</span><br></pre></td></tr></table></figure><p>然后我们来修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># cd /usr/share/nginx</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment">#  mv /usr/share/nginx/ss/lib/config-simple.php /usr/share/nginx/ss/lib/config.php</span></span><br></pre></td></tr></table></figure><p>以下是congfig.php文件的内容我们可以针对自己的需求来修改，重点先修改 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Define DB Connection  数据库信息</span><br><span class="line">define(&apos;DB_HOST&apos;,&apos;localhost&apos;);   </span><br><span class="line">define(&apos;DB_USER&apos;,&apos;ss&apos;); # 我们最开始创建的 ss 用户</span><br><span class="line">define(&apos;DB_PWD&apos;,&apos;ss&apos;);  # ss 用户的数据库密码</span><br><span class="line">define(&apos;DB_DBNAME&apos;,&apos;shadowsocks&apos;); # 数据库名字</span><br><span class="line">define(&apos;DB_CHARSET&apos;,&apos;utf8&apos;);</span><br><span class="line">define(&apos;DB_TYPE&apos;,&apos;mysql&apos;);</span><br></pre></td></tr></table></figure><p>完整的配置文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ss-panel配置文件</span></span><br><span class="line"><span class="comment"> * https://github.com/orvice/ss-panel</span></span><br><span class="line"><span class="comment"> * Author <span class="doctag">@orvice</span></span></span><br><span class="line"><span class="comment"> * https://orvice.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义流量</span></span><br><span class="line">$tokb = <span class="number">1024</span>;</span><br><span class="line">$tomb = <span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line">$togb = $tomb*<span class="number">1024</span>;</span><br><span class="line"><span class="comment">//Define DB Connection  数据库信息</span></span><br><span class="line">define(<span class="string">'DB_HOST'</span>,<span class="string">'localhost'</span>);</span><br><span class="line">define(<span class="string">'DB_USER'</span>,<span class="string">'ss'</span>); <span class="comment">#</span></span><br><span class="line">define(<span class="string">'DB_PWD'</span>,<span class="string">'ss'</span>);</span><br><span class="line">define(<span class="string">'DB_DBNAME'</span>,<span class="string">'shadowsocks'</span>);</span><br><span class="line">define(<span class="string">'DB_CHARSET'</span>,<span class="string">'utf8'</span>);</span><br><span class="line">define(<span class="string">'DB_TYPE'</span>,<span class="string">'mysql'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 下面的东西根据需求修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//define Plan</span></span><br><span class="line"><span class="comment">//注册用户的初始化流量</span></span><br><span class="line"><span class="comment">//默认5GiB</span></span><br><span class="line">$a_transfer = $togb*<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//签到设置 签到活的的最低最高流量,单位MB</span></span><br><span class="line">$check_min = <span class="number">1</span>;</span><br><span class="line">$check_max = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//name</span></span><br><span class="line">$site_name = <span class="string">"ss-panel"</span>;</span><br><span class="line">$site_url  = <span class="string">"https://panel.com/"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 站点盐值，用于加密密码</span></span><br><span class="line"><span class="comment"> * 第一次安装请修改此值，安装后请勿修改！！否则会使所有密码失效，仅限加密方式不为1的时候有效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$salt = <span class="string">"ss-panel"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码加密方式，注意： 2.4以前的版本，请修改加密方式为「1」，否则会使密码失效！</span></span><br><span class="line"><span class="comment"> * 更多说明见wiki https://github.com/orvice/ss-panel/wiki/Install-Guide-zh_cn</span></span><br><span class="line"><span class="comment"> * 加密方式:</span></span><br><span class="line"><span class="comment"> * 1 md5</span></span><br><span class="line"><span class="comment"> * 2 带salt的Sha256加密，新安装建议使用此加密方式！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$pwd_mode = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户注册后获得的邀请码最低最高</span></span><br><span class="line"><span class="comment">//都设置为0用户就不能邀请</span></span><br><span class="line">$user_invite_min = <span class="string">'1'</span>;</span><br><span class="line">$user_invite_max = <span class="string">'1'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//选择邮件服务</span></span><br><span class="line"><span class="comment">// smtp未完成，现在只能用mailgun</span></span><br><span class="line"><span class="comment">//mail-gun</span></span><br><span class="line"><span class="comment">//mail-smtp</span></span><br><span class="line">$Selectmailservice = <span class="string">"mail-gun"</span>;</span><br><span class="line"><span class="comment">//邮件发件人</span></span><br><span class="line">$sender = <span class="string">"xxx@xxx.xx"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mail-gun</span></span><br><span class="line"><span class="comment">// Get your key from https://mailgun.com</span></span><br><span class="line">$mailgun_key = <span class="string">""</span>;</span><br><span class="line">$mailgun_domain = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//mail-smtp</span></span><br><span class="line"><span class="comment">// smtp发件方式暂时无法使用</span></span><br><span class="line"><span class="comment">//设置smtp服务器连接方式:  </span></span><br><span class="line"><span class="comment">//加密连接(ssl) = "1"</span></span><br><span class="line"><span class="comment">//普通连接 = "0"</span></span><br><span class="line">$mail_smtp_Connection = <span class="string">"1"</span>;</span><br><span class="line"><span class="comment">//smtp服务器端口 25 , 465 ...</span></span><br><span class="line">$mail_smtp_Port = <span class="number">465</span>;</span><br><span class="line"><span class="comment">//smtp服务器</span></span><br><span class="line">$mail_smtp_Server = <span class="string">"smtp.gmail.com"</span>;</span><br><span class="line"><span class="comment">//邮件帐号</span></span><br><span class="line">$mail_smtp_Account = <span class="string">"xxxx@gmail.com"</span>;</span><br><span class="line"><span class="comment">//邮件密码</span></span><br><span class="line">$mail_smtp_password = <span class="string">"密码"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">'do.php'</span>;</span><br></pre></td></tr></table></figure><p>到此，ss-panel前端界面也安装完毕，然后我们需要修改一下Nginx配置文件，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># cd /etc/nginx/sites-available/</span></span><br><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># vim default</span></span><br></pre></td></tr></table></figure><p>把default文件修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 443;</span><br><span class="line">server_name localhost;</span><br><span class="line">server_name_in_redirect off;</span><br><span class="line">root /usr/share/nginx/ss;</span><br><span class="line">index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">try_files $uri $uri/ /index.php?q=$uri&amp;$args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">include /etc/nginx/fastcgi_params;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME /usr/share/nginx/ss$fastcgi_script_name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-512mb-sfo1-01:~<span class="comment"># shutdown -r now</span></span><br></pre></td></tr></table></figure><p>然后我们访问<code>http://ip:443</code>就可以看到ss-panel前端界面了：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/9f1201f5gw1eyydl4hdbuj21kw15edog.jpg" alt=""></p><p>后端我们可以<code>http://ip:443/admin</code>界面如下<br><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409142234.png" alt=""><br>如果不知道账户名，密码的话，我们可以去数据库查一下，我们可以登录数据库中，看一下<code>shadowsocks</code>库中的表</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409142309.png" alt=""></p><p>我们可以查一下<code>ss_user_admin</code>表和<code>user</code>看一下管理员和用户，然后登录后台，进行相应地操作。如果要设置新的管理员，我们可以再导入 user.sql 之前修改里面的信息</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn4fi7newtj310x0hxq7n.jpg" alt="user.sql"></p><p>或者我们直接写 SQL 语句来修改，<code>mysql -u root -p</code>，进入 mysql，切换 DataBase为 <code>shadowsocks</code>，执行下面的 SQL 预计即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> user_name = <span class="string">'user_name'</span>, email = <span class="string">'邮箱'</span>, pass = <span class="string">'md5-32位小写'</span>;</span><br></pre></td></tr></table></figure><p>然后通过<code>http://ip:443/admin</code>登录</p><p>到此，ss前后台管理多用户的分享平台就这样建成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#FF785A&quot; size=&quot;4.5&quot;&gt;本文针对 ss-panel V2 版本的教程，&lt;strong&gt;更新于 2018-1-4&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;#FF785A&quot; size=&quot;4.5&quot;&gt;服务器&lt;/font&gt;&lt;a href=&quot;https://www.vultr.com/?ref=6928081&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vultr&lt;/a&gt;、&lt;a href=&quot;https://m.do.co/c/fe08bbc0a6c0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;digitalocean&lt;/a&gt;，&lt;font color=&quot;#FF785A&quot; size=&quot;4.5&quot;&gt;系统版本 &lt;code&gt;Ubuntu 16.04.3 LTS&lt;/code&gt; 上&lt;strong&gt;测试通过&lt;/strong&gt;&lt;/font&gt;



&lt;/blockquote&gt;
&lt;p&gt;周末本想出去转转，无奈帝都的雾霾太大，只能在家里撸码，整了一个ss账号分享平台，在这记录一下过程吧。&lt;/p&gt;
&lt;p&gt;本文是基于Ubuntu 14.04下使用后端manyuser和前端ss-panel，使用nginx做代理所搭建的。&lt;br&gt;服务器推荐&lt;a href=&quot;https://www.vultr.com/?ref=6928081&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vultr&lt;/a&gt;、&lt;a href=&quot;https://m.do.co/c/fe08bbc0a6c0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;digitalocean&lt;/a&gt;。&lt;/p&gt;
&lt;h6 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; class=&quot;headerlink&quot; title=&quot;过程&quot;&gt;&lt;/a&gt;过程&lt;/h6&gt;&lt;p&gt;首先我们远程登录服务器，安装nginx,mysql和php,具体命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ubuntu-512mb-sfo1-01:~&lt;span class=&quot;comment&quot;&gt;# apt-get update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ubuntu-512mb-sfo1-01:~&lt;span class=&quot;comment&quot;&gt;# apt-get install nginx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ubuntu-512mb-sfo1-01:~&lt;span class=&quot;comment&quot;&gt;# apt-get install mysql-client mysql-server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ubuntu-512mb-sfo1-01:~&lt;span class=&quot;comment&quot;&gt;# apt-get install php php-fpm php-cli php-cgi php-mysql php-gd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;过程中如果没有错误，那就说明我们安装成功了，如果服务器中有这些环境，则可以忽略对应的步骤。&lt;/p&gt;
&lt;p&gt;接下来我们就要创建数据库了，运行&lt;code&gt;mysql -u root -p&lt;/code&gt;，输入&lt;code&gt;root&lt;/code&gt;密码。开始创建&lt;code&gt;shadowsocks&lt;/code&gt;数据库，具体 SQL:&lt;code&gt;create database shadowsocks;&lt;/code&gt; 如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/3322f6c7e5155b1e5f862d96f9bb927a.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后建立一个名为ss，密码为ss的MySQL用户，因为这个用户只能本地登录，所以密码简单点也无所谓：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt;  grant all privileges on shadowsocks.* to ss@localhost identified by &lt;span class=&quot;string&quot;&gt;&#39;ss&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建完成我们退出MySQL:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt;  &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这步，我们的数据库已经完成了。
    
    </summary>
    
    
      <category term="ss" scheme="http://blog.luobbe.com/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>使用CAShapeLayer实现环形进度条</title>
    <link href="http://blog.luobbe.com/2015/11/25/casharplayer-percent/"/>
    <id>http://blog.luobbe.com/2015/11/25/casharplayer-percent/</id>
    <published>2015-11-25T14:58:53.000Z</published>
    <updated>2015-11-25T14:58:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做项目的时候，射击狮设计了一个环形的进度条用来向用户呈现产品的信息，做完之后，感觉这个效果应该挺常用的，索性就整理一下了。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>分析了一下效果图，其实里面主要就三个主要元素，一个白色的半透明的背景圆环，姑且称之为A吧，一个橘黄色的进度圆环，称之为B，一个现实百分比的<code>label</code>。圆环可以结合<code>CAShapeLayer</code>和<code>UIBezierPath</code>进行绘制，那么整过过程就很简单了。关于<code>CAShapeLayer</code>官方的API可以查看<a href="https://developer.apple.com/library/mac/documentation/GraphicsImaging/Reference/CAShapeLayer_class/" target="_blank" rel="noopener">这里</a>。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>为了方便我把画笔的宽度，开始和结束的位置，背景颜色定义了宏，如下图</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409142902.png" alt=""><br>首先我们需要创建半透明白色背景的圆环A，代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建背景</span></span><br><span class="line">- (<span class="keyword">void</span>)initBackgroundView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    [path addArcWithCenter:center radius:radius startAngle:ChartStart endAngle:ChartEnd clockwise:<span class="literal">YES</span>];</span><br><span class="line">    bgCircleLayer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">    bgCircleLayer.path = path.CGPath;</span><br><span class="line">    bgCircleLayer.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</span><br><span class="line">    bgCircleLayer.strokeColor = BackGroundColor.CGColor;</span><br><span class="line">    bgCircleLayer.lineWidth = ChartWidth;</span><br><span class="line">    [<span class="keyword">self</span>.layer addSublayer:bgCircleLayer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了每次方便地设置环形进度，我们在<code>.h</code>文件中提供了一个方法：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setProgress:(<span class="keyword">double</span>)value animated:(<span class="built_in">BOOL</span>)animate;</span><br></pre></td></tr></table></figure><p>具体的实现如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setProgress:(<span class="keyword">double</span>)value animated:(<span class="built_in">BOOL</span>)animate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSAssert</span>(value &lt; <span class="number">1</span> &amp;&amp; value &gt; <span class="number">0</span>, <span class="string">@"value是包含0、1之间的数值"</span>);</span><br><span class="line">    progress = value;</span><br><span class="line">    animated = animate;</span><br><span class="line">    radian = value * (<span class="number">2</span>* M_PI - fabs(ChartStart - ChartEnd));</span><br><span class="line">    <span class="keyword">self</span>.percentLB.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.0f%%"</span>,progress*<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">self</span>.percentLB.center = [<span class="keyword">self</span> percentCenter];</span><br><span class="line">    <span class="comment">//创建环形进度</span></span><br><span class="line">    [<span class="keyword">self</span> creatCircleLayer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建环形进度的方法<code>- (void)creatCircleLayer</code>其实和环形的背景一样的，这里就不再贴代码了。</p><p>然后就是解决环形进度动画的问题了<a id="more"></a>。我们可以使用<code>CABasicAnimation</code>来实现，具体的代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)circleAnimation:(<span class="built_in">CALayer</span>*)layer</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CABasicAnimation</span> *basic=[<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeEnd"</span>];</span><br><span class="line">    basic.duration = <span class="number">2</span>;</span><br><span class="line">    basic.fromValue = @(<span class="number">0</span>);</span><br><span class="line">    basic.toValue = @(<span class="number">1</span>);</span><br><span class="line">    [layer addAnimation:basic forKey:<span class="string">@"StrokeEndKey"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是百分比<code>label</code>的展示了，其实这里面也需要用到<code>UIBezierPath</code>来展示<code>label</code>的运动路径，<code>label</code>动画的代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)percentAnimate:(<span class="built_in">CALayer</span>*)layer</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> R = <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame)/<span class="number">2.0</span>-<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.percentLB.frame)/<span class="number">2.0</span>;</span><br><span class="line">    <span class="built_in">CGPoint</span> centerP = <span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame)/<span class="number">2.0</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame)/<span class="number">2.0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path=[<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    <span class="comment">//这段圆弧的中心，半径，开始角度，结束角度，是否顺时针方向。</span></span><br><span class="line">    [path addArcWithCenter:centerP radius:R startAngle:ChartStart endAngle:ChartStart + radian clockwise:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">CAKeyframeAnimation</span> *animation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</span><br><span class="line">    animation.duration = <span class="number">2.0</span>;</span><br><span class="line">    animation.path = path.CGPath;</span><br><span class="line">    animation.calculationMode = kCAAnimationPaced;</span><br><span class="line">    [layer addAnimation:animation forKey:<span class="string">@"PercentPosition"</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们需要确定<code>label</code>的最终位置，需要用到<code>sin</code>和<code>cos</code>三角函数，然后通过<code>UIBezierPath</code>的半径和中心点来<code>label</code>最终位置现实的位置，具体确定方法：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//百分比的最终的中心位置</span></span><br><span class="line">- (<span class="built_in">CGPoint</span>)percentCenter</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> R = <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame)/<span class="number">2.0</span>-<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.percentLB.frame)/<span class="number">2.0</span>;</span><br><span class="line">    <span class="built_in">CGPoint</span> centerP = <span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame)/<span class="number">2.0</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.frame)/<span class="number">2.0</span>);</span><br><span class="line">    <span class="built_in">CGFloat</span> x = centerP.x + R * cos(radian + ChartStart);</span><br><span class="line">    <span class="built_in">CGFloat</span> y = centerP.y + R * sin(radian + ChartStart);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CGPointMake</span>(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还需要做一件事，就是<code>label</code>运动的整过过程的<code>text</code>也是动画显示的，这里我为<code>UILabel</code>增加了一个方法,结合<code>GCD</code>来实现<code>label</code>的<code>text</code>动画的，具体实现：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)scrollNumFromValue:(<span class="built_in">CGFloat</span>)fromValue toValue:(<span class="built_in">CGFloat</span>)toValue during:(<span class="built_in">CGFloat</span>)time</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//默认60次动画</span></span><br><span class="line">    <span class="keyword">self</span>.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.0f%%"</span>,fromValue];</span><br><span class="line">    __block <span class="keyword">int</span> count = <span class="number">30</span>; <span class="comment">//循环的次数</span></span><br><span class="line">    <span class="built_in">CGFloat</span> increase = (toValue - fromValue)/count;</span><br><span class="line">    <span class="built_in">CGFloat</span> perTime = time * <span class="number">1.0</span> / count;</span><br><span class="line">    </span><br><span class="line">    __block <span class="keyword">float</span> currentNum = fromValue;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">    dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>,queue);</span><br><span class="line">    dispatch_source_set_timer(_timer,dispatch_walltime(<span class="literal">NULL</span>, <span class="number">0</span>),perTime*<span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span>);</span><br><span class="line">    dispatch_source_set_event_handler(_timer, ^&#123;</span><br><span class="line">        <span class="comment">//计算每次递增</span></span><br><span class="line">        <span class="keyword">if</span>(count &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            dispatch_source_cancel(_timer);</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="keyword">self</span>.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.0f%%"</span>,toValue];</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="keyword">if</span> (currentNum &gt;= toValue) &#123;</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    currentNum = currentNum + increase;</span><br><span class="line">                    <span class="keyword">self</span>.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.0f%%"</span>,currentNum];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            count --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_resume(_timer);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，整个环形进度条就实现了，具体的效果如下图：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409142945.png" alt=""></p><p>本文<a href="https://github.com/lovels/LBCircleView" target="_blank" rel="noopener">Demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做项目的时候，射击狮设计了一个环形的进度条用来向用户呈现产品的信息，做完之后，感觉这个效果应该挺常用的，索性就整理一下了。&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;分析了一下效果图，其实里面主要就三个主要元素，一个白色的半透明的背景圆环，姑且称之为A吧，一个橘黄色的进度圆环，称之为B，一个现实百分比的&lt;code&gt;label&lt;/code&gt;。圆环可以结合&lt;code&gt;CAShapeLayer&lt;/code&gt;和&lt;code&gt;UIBezierPath&lt;/code&gt;进行绘制，那么整过过程就很简单了。关于&lt;code&gt;CAShapeLayer&lt;/code&gt;官方的API可以查看&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/GraphicsImaging/Reference/CAShapeLayer_class/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; class=&quot;headerlink&quot; title=&quot;过程&quot;&gt;&lt;/a&gt;过程&lt;/h3&gt;&lt;p&gt;为了方便我把画笔的宽度，开始和结束的位置，背景颜色定义了宏，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409142902.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;首先我们需要创建半透明白色背景的圆环A，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建背景&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)initBackgroundView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIBezierPath&lt;/span&gt; *path = [&lt;span class=&quot;built_in&quot;&gt;UIBezierPath&lt;/span&gt; bezierPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [path addArcWithCenter:center radius:radius startAngle:ChartStart endAngle:ChartEnd clockwise:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bgCircleLayer = [&lt;span class=&quot;built_in&quot;&gt;CAShapeLayer&lt;/span&gt; layer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bgCircleLayer.path = path.CGPath;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bgCircleLayer.fillColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; clearColor].CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bgCircleLayer.strokeColor = BackGroundColor.CGColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bgCircleLayer.lineWidth = ChartWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.layer addSublayer:bgCircleLayer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了每次方便地设置环形进度，我们在&lt;code&gt;.h&lt;/code&gt;文件中提供了一个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setProgress:(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)value animated:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animate;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体的实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setProgress:(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)value animated:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSAssert&lt;/span&gt;(value &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; value &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;value是包含0、1之间的数值&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    progress = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animated = animate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    radian = value * (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;* M_PI - fabs(ChartStart - ChartEnd));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.percentLB.text = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%.0f%%&quot;&lt;/span&gt;,progress*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.percentLB.center = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; percentCenter];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//创建环形进度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; creatCircleLayer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建环形进度的方法&lt;code&gt;- (void)creatCircleLayer&lt;/code&gt;其实和环形的背景一样的，这里就不再贴代码了。&lt;/p&gt;
&lt;p&gt;然后就是解决环形进度动画的问题了
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.luobbe.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 9 —3D Touch体验</title>
    <link href="http://blog.luobbe.com/2015/10/14/3d-touch/"/>
    <id>http://blog.luobbe.com/2015/10/14/3d-touch/</id>
    <published>2015-10-14T06:11:36.000Z</published>
    <updated>2015-10-16T06:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>3D Touch是iOS 9的新特性，趁着6s到手了，赶紧体验了一把，确实方便了不少，今天我就简单的介绍一下。</p><p>简单的说3D Touch就是通过区分轻按和重按来进行不同的用户交互。Xcode 7才支持3D Touch的开发，但是这个手势并不支持模拟器，还好在<code>github</code>上找到了一个<a href="https://github.com/DeskConnect/SBShortcutMenuSimulator" target="_blank" rel="noopener">插件</a>，可以在模拟器上模拟3D Touch的功能。插件的使用在<code>github</code>有上明确的教程，这里就不叙述了。</p><p>在苹果的开发者官网上我们可以3D Touch的链接：<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/" target="_blank" rel="noopener">https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/</a></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>3D Touch的主要应用分为三个模块：</p><p>1、 Home Screen Quick Actions</p><p>通过主屏幕的应用icon，我们可以用3D Touch呼出一个菜单，进行快速定位应用功能模块相关功能的开发。比如下图中的邮件：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143254.png" alt=""></p><p>2.Peek and Pop</p><p>这个功能是一套全新的用户交互机制，在使用3D Touch时，我们可以预览下一个页面的视图，并且可以进行简单的操作。如下图：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143315.png" alt=""></p><p>3.Force Properties</p><p>iOS9为我们提供了一个新的交互参数:力度。我们可以检测某一交互的力度值，来做相应的交互处理。例如，我们可以通过力度来控制快进的快慢，音量增加的快慢等。<a id="more"></a></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>1.Home Screen Quick Actions分为静态和动态。静态的只需要在我们项目中的plist文件中配置，然后用户安装就可以使用了，具体的配置信息如下图：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143346.png" alt=""></p><p>对应的plist文件的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;UIApplicationShortcutItemType&lt;/key&gt;</span><br><span class="line">&lt;string&gt;camera&lt;/string&gt;</span><br><span class="line">&lt;key&gt;UIApplicationShortcutItemIconType&lt;/key&gt;</span><br><span class="line">&lt;string&gt;UIApplicationShortcutIconTypeCompose&lt;/string&gt;</span><br><span class="line">&lt;key&gt;UIApplicationShortcutItemTitle&lt;/key&gt;</span><br><span class="line">&lt;string&gt;拍照&lt;/string&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下图：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143427.png" alt=""></p><p>另外一种就是动态的，动态需要我们使用代码来创建，具体使用到的类是<code>UIApplicationShortcutItem</code>,我们可以进入<code>UIApplicationShortcutItem.h</code>文件中包含的东西:</p><p>主要包含了三个类：</p><ul><li><code>UIApplicationShortcutIcon</code>：创建ShortcutItem中图片icon的类</li><li><code>UIApplicationShortcutItem</code>：创建3D Touch的ShortcutItem的类</li><li><code>UIMutableApplicationShortcutItem</code>：创建可变3D Touch的ShortcutItem的类</li></ul><p>因为这是ios 9新出来的API，所以并不是很复杂，我们来直接使用：</p><pre><code>UIApplicationShortcutItem *shareItem = [[UIApplicationShortcutItem alloc] initWithType:@&quot;Share&quot; localizedTitle:@&quot;分享&quot; localizedSubtitle:nil icon:[UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeShare] userInfo:nil];</code></pre><p>上述代码我们就用代码创建了一个3D Touch的条目，然后赋值给<code>application.shortcutItems</code>即可,运行如下图：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143509.png" alt=""></p><p>值得提出的是Home Screen Quick Actions最多只能创建四个，多了就不会在显示了。点击每个<code>ShortcutItem</code>的处理在<code>UIApplication</code>中的，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void(^)(BOOL succeeded))completionHandler</span><br></pre></td></tr></table></figure><p>然后我们可以针对不用的点击事件做不同的处理。</p><p>2.Peek and Pop</p><p>首先我们来看一下效果：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143546.png" alt=""></p><p>这就是 3D Touch另外一个使用的案例。下面我们来说一下具体的实现。</p><p>要想在APP中使用3D Touch,首先我们需要判断该设备是否开启3d touch功能，因为用户可以在’设置-通用-辅助功能-3D Touch’中来开启关闭3D Touch功能。幸好这个功能是苹果默认开启的，使用之前我们需要在使用到的<code>ViewController</code>中手动判断一下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.traitCollection.forceTouchCapability == <span class="built_in">UIForceTouchCapabilityAvailable</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> registerForPreviewingWithDelegate:<span class="keyword">self</span> sourceView:<span class="keyword">self</span>.preBt];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>[self registerForPreviewingWithDelegate:self sourceView:self.preBt];</code>就是将<code>self.preBt</code>这个视图注册允许使用3D Touch功能。然后我们还需要使用到一个协议<code>UIViewControllerPreviewingDelegate</code>，这个协议中有两个方法：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIViewController</span> *)previewingContext:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerPreviewing</span>&gt;)previewingContext viewControllerForLocation:(<span class="built_in">CGPoint</span>)location <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</span><br><span class="line">- (<span class="keyword">void</span>)previewingContext:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerPreviewing</span>&gt;)previewingContext commitViewController:(<span class="built_in">UIViewController</span> *)viewControllerToCommit <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</span><br></pre></td></tr></table></figure><p>这两个方法都必须实现，缺一不可，具体的实现过程如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIViewController</span> *)previewingContext:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerPreviewing</span>&gt;)previewingContext viewControllerForLocation:(<span class="built_in">CGPoint</span>)location</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    previewingContext.sourceRect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, previewingContext.sourceView.frame.size.width, previewingContext.sourceView.frame.size.height);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIStoryboard</span> *s = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Main"</span> bundle:<span class="literal">nil</span>];</span><br><span class="line">    PreViewController *vc = [s instantiateViewControllerWithIdentifier:<span class="string">@"PreViewController"</span>];</span><br><span class="line">    vc.preferredContentSize = <span class="built_in">CGSizeMake</span>(<span class="number">0</span>, <span class="number">300</span>);</span><br><span class="line">    <span class="keyword">return</span> vc;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)previewingContext:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerPreviewing</span>&gt;)previewingContext commitViewController:(<span class="built_in">UIViewController</span> *)viewControllerToCommit </span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:viewControllerToCommit animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在我们的目标控制器<code>PreViewController</code>中，可以实现<code>- (NSArray&lt;id&lt;UIPreviewActionItem&gt;&gt; *)previewActionItems</code>，也可以不实现，不实现则没有<code>ActionItem</code>。本文<a href="https://github.com/lovels/LB_3DTouch" target="_blank" rel="noopener"><font color="#6495ED">Demo</font></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;3D Touch是iOS 9的新特性，趁着6s到手了，赶紧体验了一把，确实方便了不少，今天我就简单的介绍一下。&lt;/p&gt;
&lt;p&gt;简单的说3D Touch就是通过区分轻按和重按来进行不同的用户交互。Xcode 7才支持3D Touch的开发，但是这个手势并不支持模拟器，还好在&lt;code&gt;github&lt;/code&gt;上找到了一个&lt;a href=&quot;https://github.com/DeskConnect/SBShortcutMenuSimulator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;插件&lt;/a&gt;，可以在模拟器上模拟3D Touch的功能。插件的使用在&lt;code&gt;github&lt;/code&gt;有上明确的教程，这里就不叙述了。&lt;/p&gt;
&lt;p&gt;在苹果的开发者官网上我们可以3D Touch的链接：&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;3D Touch的主要应用分为三个模块：&lt;/p&gt;
&lt;p&gt;1、 Home Screen Quick Actions&lt;/p&gt;
&lt;p&gt;通过主屏幕的应用icon，我们可以用3D Touch呼出一个菜单，进行快速定位应用功能模块相关功能的开发。比如下图中的邮件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143254.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.Peek and Pop&lt;/p&gt;
&lt;p&gt;这个功能是一套全新的用户交互机制，在使用3D Touch时，我们可以预览下一个页面的视图，并且可以进行简单的操作。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143315.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3.Force Properties&lt;/p&gt;
&lt;p&gt;iOS9为我们提供了一个新的交互参数:力度。我们可以检测某一交互的力度值，来做相应的交互处理。例如，我们可以通过力度来控制快进的快慢，音量增加的快慢等。
    
    </summary>
    
    
      <category term="iOS 9" scheme="http://blog.luobbe.com/tags/iOS-9/"/>
    
  </entry>
  
  <entry>
    <title>iOS 滚动的文字视图</title>
    <link href="http://blog.luobbe.com/2015/09/28/scrolllabel/"/>
    <id>http://blog.luobbe.com/2015/09/28/scrolllabel/</id>
    <published>2015-09-28T08:55:15.000Z</published>
    <updated>2015-09-29T10:10:52.000Z</updated>
    
    <content type="html"><![CDATA[<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在开发的过程中，我们经常会遇到这样的需求，<code>label</code>显示的区域是一定的，但是内容<code>text</code>是不固定的，可能很长，长到这个<code>label</code>根本显示不下当前的内容，这种情况通常有两种处理方案:一是我们设置<code>lineBreakMode</code>属性，这是个枚举，我们可以根据产品的设计进行不同的方式处理，如下图(处理后对应的格式可以参照图中的注释):</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143617.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二种处理方案就是让这个<code>label</code>滚动显示，这就是今天要介绍的。<br>让<code>label</code>滚动大致的思路就是创建一个<code>UIView</code>，然后再这个<code>UIView</code>上创建两个<code>label</code>，让这个两个<code>label</code>反复的显示。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面我们具体的讲一下流程：<br>首先创建一个继承<code>UIView</code>的子类<code>LBScrollLabel</code>，考虑到<code>label</code>有可能朝着上下左右四个方向滚动，所以在这里我定义了一个枚举：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>,LBScrollLabelDirection) &#123;</span><br><span class="line">    LBScrollLabelDirection_Top,         <span class="comment">//from bottom to top</span></span><br><span class="line">    LBScrollLabelDirection_Bottom,</span><br><span class="line">    LBScrollLabelDirection_Left,</span><br><span class="line">    LBScrollLabelDirection_Right,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们创建两个<code>UILabel</code>,分别命名成<code>aLabel</code>和<code>bLabel</code>吧，初始化完成之后，我们把两个<code>label</code>的<code>frame</code>设置的和<code>LBScrollLabel</code>的一样大并且添加到<code>LBScrollLabel</code>上，具体默认的摆放，如下图：<br><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143656.png" alt=""></p><p>然后我们可以给<code>label</code>赋值，考虑到<code>label.text</code>的文字可能很长，所以我们需要针对处理，具体的规则就是当<code>text</code>的长度小于等于<code>LBScrollLabel</code>的长度时候，我们把<code>aLabel</code>和<code>bLabel</code>的长宽设置和<code>LBScrollLabel</code>相等就行了，如果<code>text</code>的长度大于<code>LBScrollLabel</code>的长度时候，我们需要按照<code>text</code>的长度来设置<code>aLabel</code>和<code>bLabel</code>的长度，具体代码实现如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)handelLabeltextLength</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.direction == LBScrollLabelDirection_Top || <span class="keyword">self</span>.direction == LBScrollLabelDirection_Bottom) &#123;</span><br><span class="line">        _aLabel.frame = <span class="built_in">CGRectMake</span>(_aLabel.frame.origin.x, _aLabel.frame.origin.y, width, height);</span><br><span class="line">        _bLabel.frame = <span class="built_in">CGRectMake</span>(_bLabel.frame.origin.x, _bLabel.frame.origin.y, width, height);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.direction == LBScrollLabelDirection_Left || <span class="keyword">self</span>.direction == LBScrollLabelDirection_Right) &#123;</span><br><span class="line">        [_aLabel sizeToFit];</span><br><span class="line">        [_bLabel sizeToFit];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">CGRectGetWidth</span>(_aLabel.frame) &lt;= width) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            _aLabel.frame = <span class="built_in">CGRectMake</span>(_aLabel.frame.origin.x, _aLabel.frame.origin.y, width, height);</span><br><span class="line">            _bLabel.frame = <span class="built_in">CGRectMake</span>(_bLabel.frame.origin.x, _bLabel.frame.origin.y, width, height);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            _aLabel.frame = <span class="built_in">CGRectMake</span>(_aLabel.frame.origin.x, _aLabel.frame.origin.y, <span class="built_in">CGRectGetWidth</span>(_aLabel.frame), height);</span><br><span class="line">            _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMaxX</span>(_aLabel.frame), _bLabel.frame.origin.y, <span class="built_in">CGRectGetWidth</span>(_aLabel.frame), height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们在<code>LBScrollLabel.h</code>文件中定义一个方法<code>- (void)beginScrollWithDirection:(LBScrollLabelDirection)direction;</code>，来控制<code>label</code>滚动<a id="more"></a>，具体代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)beginScrollWithDirection:(LBScrollLabelDirection)direction &#123;</span><br><span class="line">    <span class="keyword">self</span>.direction = direction;</span><br><span class="line">    <span class="comment">//move distance per second</span></span><br><span class="line">    distance = LBScrollSpeed * <span class="number">0.01</span>;</span><br><span class="line">    <span class="comment">//handel long text</span></span><br><span class="line">    [<span class="keyword">self</span> handelLabeltextLength];</span><br><span class="line">    <span class="comment">//set _bLabel's position</span></span><br><span class="line">    <span class="keyword">if</span> (_direction == LBScrollLabelDirection_Top) &#123;</span><br><span class="line">        _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, height, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (_direction == LBScrollLabelDirection_Bottom) &#123;</span><br><span class="line">        _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, -height, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (_direction == LBScrollLabelDirection_Left) &#123;</span><br><span class="line">        _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMaxX</span>(_aLabel.frame), <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (_direction == LBScrollLabelDirection_Right) &#123;</span><br><span class="line">        _bLabel.frame = <span class="built_in">CGRectMake</span>(-<span class="built_in">CGRectGetMaxX</span>(_aLabel.frame), <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timer != <span class="literal">nil</span>) &#123;</span><br><span class="line">        [timer invalidate];</span><br><span class="line">        timer = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">0.01</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(animationLabel) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>label</code>滚动我们需要考虑到滚动的速度，所以我定义了一个宏，设置了<code>label</code>的速度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//default speed 10</span><br><span class="line">#define LBScrollSpeed     10</span><br></pre></td></tr></table></figure><p>最后我们定义一个<code>NSTimer</code>定时器，根据不同的滚动方向，移动<code>aLabel</code>和<code>bLabel</code>的位置，具体代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)animationLabel &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (_direction) &#123;</span><br><span class="line">        <span class="keyword">case</span> LBScrollLabelDirection_Top:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (fabs(<span class="built_in">CGRectGetMinY</span>(_aLabel.frame))&gt;=height) &#123;</span><br><span class="line">                _aLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_aLabel.frame), height);</span><br><span class="line">                _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, height, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">            &#125;</span><br><span class="line">            _aLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="built_in">CGRectGetMinY</span>(_aLabel.frame) - distance, <span class="built_in">CGRectGetWidth</span>(_aLabel.frame), height);</span><br><span class="line">            _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="built_in">CGRectGetMinY</span>(_bLabel.frame) - distance, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LBScrollLabelDirection_Bottom:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (fabs(<span class="built_in">CGRectGetMinY</span>(_aLabel.frame))&gt;=height) &#123;</span><br><span class="line">                _aLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_aLabel.frame), height);</span><br><span class="line">                _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, -height, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">            &#125;</span><br><span class="line">            _aLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="built_in">CGRectGetMinY</span>(_aLabel.frame) + distance, <span class="built_in">CGRectGetWidth</span>(_aLabel.frame), height);</span><br><span class="line">            _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="built_in">CGRectGetMinY</span>(_bLabel.frame) + distance, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LBScrollLabelDirection_Left:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (fabs(<span class="built_in">CGRectGetMinX</span>(_aLabel.frame))&gt;=<span class="built_in">CGRectGetWidth</span>(_aLabel.frame)) &#123;</span><br><span class="line">                _aLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_aLabel.frame), height);</span><br><span class="line">                _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMaxX</span>(_aLabel.frame), <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">            &#125;</span><br><span class="line">            _aLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMinX</span>(_aLabel.frame) - distance, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_aLabel.frame), height);</span><br><span class="line">            _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMinX</span>(_bLabel.frame) - distance, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LBScrollLabelDirection_Right:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (fabs(<span class="built_in">CGRectGetMinX</span>(_aLabel.frame))&gt;=<span class="built_in">CGRectGetWidth</span>(_aLabel.frame)) &#123;</span><br><span class="line">                _aLabel.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_aLabel.frame), height);</span><br><span class="line">                _bLabel.frame = <span class="built_in">CGRectMake</span>(-<span class="built_in">CGRectGetMaxX</span>(_aLabel.frame), <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">            &#125;</span><br><span class="line">            _aLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMinX</span>(_aLabel.frame) + distance, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_aLabel.frame), height);</span><br><span class="line">            _bLabel.frame = <span class="built_in">CGRectMake</span>(<span class="built_in">CGRectGetMinX</span>(_bLabel.frame) + distance, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(_bLabel.frame), height);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候非常简单，代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LBScrollLabel *tempLB = [[LBScrollLabel alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="number">500</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.view.frame) - <span class="number">40</span>, <span class="number">30</span>)];</span><br><span class="line">tempLB.backgroundColor = [<span class="built_in">UIColor</span> colorWithRed:(arc4random()%<span class="number">255</span>)/<span class="number">255.0</span> green:(arc4random()%<span class="number">255</span>)/<span class="number">255.0</span> blue:(arc4random()%<span class="number">255</span>)/<span class="number">255.0</span> alpha:<span class="number">1</span>];</span><br><span class="line">tempLB.text = <span class="string">@"This is a scroll label"</span>;</span><br><span class="line">[tempLB beginScrollWithDirection:LBScrollLabelDirection_Left];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:tempLB];</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上下左右不同方向的滚动效果如下图：<br><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143726.png" alt=""></p><p>本文<a href="https://github.com/lovels/LBScrollLabel" target="_blank" rel="noopener"><font color="#6495ED">Demo</font></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在开发的过程中，我们经常会遇到这样的需求，&lt;code&gt;label&lt;/code&gt;显示的区域是一定的，但是内容&lt;code&gt;text&lt;/code&gt;是不固定的，可能很长，长到这个&lt;code&gt;label&lt;/code&gt;根本显示不下当前的内容，这种情况通常有两种处理方案:一是我们设置&lt;code&gt;lineBreakMode&lt;/code&gt;属性，这是个枚举，我们可以根据产品的设计进行不同的方式处理，如下图(处理后对应的格式可以参照图中的注释):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143617.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;第二种处理方案就是让这个&lt;code&gt;label&lt;/code&gt;滚动显示，这就是今天要介绍的。&lt;br&gt;让&lt;code&gt;label&lt;/code&gt;滚动大致的思路就是创建一个&lt;code&gt;UIView&lt;/code&gt;，然后再这个&lt;code&gt;UIView&lt;/code&gt;上创建两个&lt;code&gt;label&lt;/code&gt;，让这个两个&lt;code&gt;label&lt;/code&gt;反复的显示。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;下面我们具体的讲一下流程：&lt;br&gt;首先创建一个继承&lt;code&gt;UIView&lt;/code&gt;的子类&lt;code&gt;LBScrollLabel&lt;/code&gt;，考虑到&lt;code&gt;label&lt;/code&gt;有可能朝着上下左右四个方向滚动，所以在这里我定义了一个枚举：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;,LBScrollLabelDirection) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LBScrollLabelDirection_Top,         &lt;span class=&quot;comment&quot;&gt;//from bottom to top&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LBScrollLabelDirection_Bottom,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LBScrollLabelDirection_Left,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LBScrollLabelDirection_Right,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们创建两个&lt;code&gt;UILabel&lt;/code&gt;,分别命名成&lt;code&gt;aLabel&lt;/code&gt;和&lt;code&gt;bLabel&lt;/code&gt;吧，初始化完成之后，我们把两个&lt;code&gt;label&lt;/code&gt;的&lt;code&gt;frame&lt;/code&gt;设置的和&lt;code&gt;LBScrollLabel&lt;/code&gt;的一样大并且添加到&lt;code&gt;LBScrollLabel&lt;/code&gt;上，具体默认的摆放，如下图：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143656.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后我们可以给&lt;code&gt;label&lt;/code&gt;赋值，考虑到&lt;code&gt;label.text&lt;/code&gt;的文字可能很长，所以我们需要针对处理，具体的规则就是当&lt;code&gt;text&lt;/code&gt;的长度小于等于&lt;code&gt;LBScrollLabel&lt;/code&gt;的长度时候，我们把&lt;code&gt;aLabel&lt;/code&gt;和&lt;code&gt;bLabel&lt;/code&gt;的长宽设置和&lt;code&gt;LBScrollLabel&lt;/code&gt;相等就行了，如果&lt;code&gt;text&lt;/code&gt;的长度大于&lt;code&gt;LBScrollLabel&lt;/code&gt;的长度时候，我们需要按照&lt;code&gt;text&lt;/code&gt;的长度来设置&lt;code&gt;aLabel&lt;/code&gt;和&lt;code&gt;bLabel&lt;/code&gt;的长度，具体代码实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)handelLabeltextLength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.direction == LBScrollLabelDirection_Top || &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.direction == LBScrollLabelDirection_Bottom) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _aLabel.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(_aLabel.frame.origin.x, _aLabel.frame.origin.y, width, height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _bLabel.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(_bLabel.frame.origin.x, _bLabel.frame.origin.y, width, height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.direction == LBScrollLabelDirection_Left || &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.direction == LBScrollLabelDirection_Right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [_aLabel sizeToFit];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [_bLabel sizeToFit];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(_aLabel.frame) &amp;lt;= width) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _aLabel.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(_aLabel.frame.origin.x, _aLabel.frame.origin.y, width, height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _bLabel.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(_bLabel.frame.origin.x, _bLabel.frame.origin.y, width, height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _aLabel.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(_aLabel.frame.origin.x, _aLabel.frame.origin.y, &lt;span class=&quot;built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(_aLabel.frame), height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _bLabel.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;CGRectGetMaxX&lt;/span&gt;(_aLabel.frame), _bLabel.frame.origin.y, &lt;span class=&quot;built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(_aLabel.frame), height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们在&lt;code&gt;LBScrollLabel.h&lt;/code&gt;文件中定义一个方法&lt;code&gt;- (void)beginScrollWithDirection:(LBScrollLabelDirection)direction;&lt;/code&gt;，来控制&lt;code&gt;label&lt;/code&gt;滚动
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.luobbe.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>利用runtime动态创建类并且添加属性和方法</title>
    <link href="http://blog.luobbe.com/2015/09/22/runtime-creatclass/"/>
    <id>http://blog.luobbe.com/2015/09/22/runtime-creatclass/</id>
    <published>2015-09-22T06:17:25.000Z</published>
    <updated>2015-09-22T13:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Objective-C是一门动态语言，它的很多东西都是运行的时候才决定的，比如调用的方法等等。利用这个特性可以做很多事情，可以动态的创建类、添加方法、属性，今天就来通过一个例子练习一下。</p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要使用<code>runtime</code>首先我们要引入头文件<code>#import &lt;objc/runtime.h&gt;</code>然后在<code>- (void)viewDidLoad</code>中动态创建类：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态创建类</span></span><br><span class="line">Class person = objc_allocateClassPair([<span class="built_in">NSObject</span> <span class="keyword">class</span>], <span class="string">"Person"</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//添加变量</span></span><br><span class="line">class_addIvar(person, <span class="string">"name"</span>, <span class="keyword">sizeof</span>(<span class="built_in">NSString</span> *), <span class="number">0</span>, <span class="string">"@"</span>);</span><br><span class="line"><span class="comment">//添加函数  sayHi</span></span><br><span class="line">class_addMethod(person, <span class="keyword">@selector</span>(sayHi:), (IMP)sayHi, <span class="string">"v@:"</span>);</span><br><span class="line">objc_registerClassPair(person);</span><br><span class="line"><span class="comment">//初始化一个person对象</span></span><br><span class="line"><span class="keyword">id</span> Tom = [[person alloc] init];</span><br><span class="line">[Tom setValue:<span class="string">@"Tom"</span> forKey:<span class="string">@"name"</span>];</span><br><span class="line">[Tom sayHi:<span class="string">@"Jeck"</span>];</span><br></pre></td></tr></table></figure><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述代码，我们通过<code>objc_allocateClassPair()</code>创建了一个继承<code>NSObject</code>的<code>person</code>的子类，然后通过<code>objc_registerClassPair()</code>这个函数注册了<code>person</code>类，下面我们就可以使用这个类了，使用之前我们在给<code>person</code>类中添加一个<code>name</code>属性和<code>sayHi:</code>方法，分别通过<code>class_addIvar()</code>和<code>class_addMethod()</code>来添加，接下来我们要实现我们添加的<code>sayHi:</code>方法，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个函数必须写，要不然xcode会报错，实际运行的时候，这个函数是不会调用的</span></span><br><span class="line">-(<span class="keyword">void</span>)sayHi:(<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行的时候，会调用这个方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> sayHi(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd, <span class="built_in">NSString</span> *name)</span><br><span class="line">&#123;</span><br><span class="line">    Ivar n = class_getInstanceVariable([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="string">"name"</span>);</span><br><span class="line">    <span class="keyword">id</span> a = object_getIvar(<span class="keyword">self</span>, n);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"hello %@,my name is %@"</span>,name,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>static void sayHi(id self, SEL _cmd, NSString *name)</code>这个就是我们运行时候调用的方法，其中<code>self</code>使我们使用<code>person</code>创建的对象<code>Tom</code>,<code>_cmd</code>是调用的方法名，<code>name</code>就是传过来的参数，如果有多个参数，可以写成<code>static void sayHi(id self, SEL _cmd, NSString *name,...)</code>省略号可以填写你愿意添加的参数。<a id="more"></a></p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样我们就利用<code>runtime</code>动态的创建了一个<code>person</code>类，包括了<code>name</code>属性和<code>sayHi:</code>方法，运行如结果如下图：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409142806.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Objective-C是一门动态语言，它的很多东西都是运行的时候才决定的，比如调用的方法等等。利用这个特性可以做很多事情，可以动态的创建类、添加方法、属性，今天就来通过一个例子练习一下。&lt;/p&gt;
&lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;要使用&lt;code&gt;runtime&lt;/code&gt;首先我们要引入头文件&lt;code&gt;#import &amp;lt;objc/runtime.h&amp;gt;&lt;/code&gt;然后在&lt;code&gt;- (void)viewDidLoad&lt;/code&gt;中动态创建类：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//动态创建类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class person = objc_allocateClassPair([&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&quot;Person&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//添加变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class_addIvar(person, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//添加函数  sayHi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class_addMethod(person, &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(sayHi:), (IMP)sayHi, &lt;span class=&quot;string&quot;&gt;&quot;v@:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_registerClassPair(person);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//初始化一个person对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; Tom = [[person alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Tom setValue:&lt;span class=&quot;string&quot;&gt;@&quot;Tom&quot;&lt;/span&gt; forKey:&lt;span class=&quot;string&quot;&gt;@&quot;name&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Tom sayHi:&lt;span class=&quot;string&quot;&gt;@&quot;Jeck&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上述代码，我们通过&lt;code&gt;objc_allocateClassPair()&lt;/code&gt;创建了一个继承&lt;code&gt;NSObject&lt;/code&gt;的&lt;code&gt;person&lt;/code&gt;的子类，然后通过&lt;code&gt;objc_registerClassPair()&lt;/code&gt;这个函数注册了&lt;code&gt;person&lt;/code&gt;类，下面我们就可以使用这个类了，使用之前我们在给&lt;code&gt;person&lt;/code&gt;类中添加一个&lt;code&gt;name&lt;/code&gt;属性和&lt;code&gt;sayHi:&lt;/code&gt;方法，分别通过&lt;code&gt;class_addIvar()&lt;/code&gt;和&lt;code&gt;class_addMethod()&lt;/code&gt;来添加，接下来我们要实现我们添加的&lt;code&gt;sayHi:&lt;/code&gt;方法，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这个函数必须写，要不然xcode会报错，实际运行的时候，这个函数是不会调用的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)sayHi:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//运行的时候，会调用这个方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; sayHi(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL _cmd, &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Ivar n = class_getInstanceVariable([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; a = object_getIvar(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;hello %@,my name is %@&quot;&lt;/span&gt;,name,a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;static void sayHi(id self, SEL _cmd, NSString *name)&lt;/code&gt;这个就是我们运行时候调用的方法，其中&lt;code&gt;self&lt;/code&gt;使我们使用&lt;code&gt;person&lt;/code&gt;创建的对象&lt;code&gt;Tom&lt;/code&gt;,&lt;code&gt;_cmd&lt;/code&gt;是调用的方法名，&lt;code&gt;name&lt;/code&gt;就是传过来的参数，如果有多个参数，可以写成&lt;code&gt;static void sayHi(id self, SEL _cmd, NSString *name,...)&lt;/code&gt;省略号可以填写你愿意添加的参数。
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.luobbe.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS UIPasteboard的应用</title>
    <link href="http://blog.luobbe.com/2015/09/01/ios-pasteboard/"/>
    <id>http://blog.luobbe.com/2015/09/01/ios-pasteboard/</id>
    <published>2015-09-01T08:19:04.000Z</published>
    <updated>2015-09-22T06:20:36.000Z</updated>
    
    <content type="html"><![CDATA[<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前段时间偶然看到了天猫客户端有一个很贴心的功能，就是领取红包的时候，只要复制了一段特定信息，然后打开天猫的客户端，就会提醒你去领红包，如下图。</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143825.png" alt=""></p><p>虽然功能很简单，但是确实很贴心的为用户考虑。</p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整个功能的原理其实很简单的，就是使用了iOS剪切板<code>UIPasteboard</code>。下面我们来细看一下这个类，来实现天猫客户端的这个功能。</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143844.png" alt=""></p><p>可以看出创建<code>UIPasteboard</code>实例有三个类方法：</p><ul><li><p><code>+ (UIPasteboard *)generalPasteboard;</code>这个方法是获取通用的剪切板实例，就是所有的应用程序都可以访问的；</p></li><li><p><code>+ (UIPasteboard *)pasteboardWithName:(NSString *)pasteboardName create:(BOOL)create;</code>这个方法是通过’pasteboardName’获取剪切板，如果没有我们可以指定是否创建；</p></li><li><p><code>+ (UIPasteboard *)pasteboardWithUniqueName;</code>创建一个唯一的剪切板，有系统命名的，名字我们可以通过<code>pasteboard.name</code>来获取。</p></li></ul><p>如果要实现天猫这样的功能，我们使用只能使用<code>+ (UIPasteboard *)generalPasteboard;</code>来获取剪切板实例。我们可以在<code>AppDelegate.m</code>中的<code>- (void)applicationDidBecomeActive:(UIApplication *)application</code>方法中加入获取剪切板内容的代码，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIPasteboard</span> *pasteboard = [<span class="built_in">UIPasteboard</span> generalPasteboard];</span><br><span class="line">    <span class="keyword">if</span> ([pasteboard.string isEqualToString:<span class="string">@"123"</span>]) &#123;</span><br><span class="line">        [[[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"Tips"</span> message:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"剪切板的信息是%@，可以去领红包了"</span>,pasteboard.string] delegate:<span class="literal">nil</span> cancelButtonTitle:<span class="string">@"确定"</span> otherButtonTitles:<span class="literal">nil</span>, <span class="literal">nil</span>] show];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>好了   这个功能就完成了，就是这么简单，看一下效果：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143907.png" alt=""></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>iOS系统中，<code>UITextField</code>、<code>UITextView</code>和<code>UIWebView</code>默认是可以使用剪切板的，如果其他的UI控件使用剪切板的话，就需要自己处理了，下面我们给<code>UILabel</code>和<code>UIImageView</code>添加剪切板。<br><a id="more"></a><br>首先我们创建一个继承<code>UILabel</code>的子类<code>LBCopyPasteLabel</code>,使用剪切板我们需要把<code>userInteractionEnabled</code>设置为<code>YES</code>,然后需要设置视图可以成为第一响应者,如下代码：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)canBecomeFirstResponder &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在<code>UIPasteboard</code>中只使用<code>Copy</code>和<code>Paste</code>功能，代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">BOOL</span>)canPerformAction:(SEL)action withSender:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(cut:)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(<span class="keyword">copy</span>:)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(paste:)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(select:)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="keyword">@selector</span>(selectAll:)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> canPerformAction:action withSender:sender];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着实现<code>- (void)copy:(id)sender</code>和<code>- (void)paste:(id)sender</code>方法，<br>具体实现如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="keyword">copy</span>:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">UIPasteboard</span> *pasteboard = [<span class="built_in">UIPasteboard</span> generalPasteboard];</span><br><span class="line">    pasteboard.string = <span class="keyword">self</span>.text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)paste:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">UIPasteboard</span> *pasteboard = [<span class="built_in">UIPasteboard</span> generalPasteboard];</span><br><span class="line">    <span class="keyword">self</span>.text = pasteboard.string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们可以在<code>label</code>中添加一个<code>UIPanGestureRecognizer</code>长按的手势，本文中使用的是在<code>- (void)touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event</code>这个方法中操作的，所以就没有添加长按的手势,我们看一下具体的实现代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>*)touches withEvent:(<span class="built_in">UIEvent</span>*)event &#123;</span><br><span class="line">    [<span class="keyword">self</span> becomeFirstResponder];</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(showMenu:)</span><br><span class="line">               withObject:<span class="keyword">self</span> afterDelay:<span class="number">1.0</span>f];</span><br><span class="line">    [<span class="keyword">super</span> touchesBegan:touches withEvent:event];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)showMenu:(<span class="keyword">id</span>)view &#123;</span><br><span class="line">    <span class="comment">//get UIMenuController</span></span><br><span class="line">    <span class="built_in">UIMenuController</span> * menu = [<span class="built_in">UIMenuController</span> sharedMenuController];</span><br><span class="line">    [menu setTargetRect:<span class="built_in">CGRectZero</span> inView: view];</span><br><span class="line">    [menu setMenuVisible: <span class="literal">YES</span> animated: <span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，这样就实现了一个可以<code>Copy</code>和<code>Paste</code>的<code>UILabel</code>，实现可以复制和剪切的<code>UIImageView</code>,原理也是一样的，只是实现<code>- (void)copy:(id)sender</code>和<code>- (void)paste:(id)sender</code>稍微不一样，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="keyword">copy</span>:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">UIPasteboard</span> *pasteboard = [<span class="built_in">UIPasteboard</span> generalPasteboard];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.image) &#123;</span><br><span class="line">        pasteboard.image = <span class="keyword">self</span>.image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)paste:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">UIPasteboard</span> *pasteboard = [<span class="built_in">UIPasteboard</span> generalPasteboard];</span><br><span class="line">    <span class="keyword">self</span>.image = pasteboard.image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，这样就完成了，具体的效果如下图,本文<a href="https://github.com/lovels/UIPasteboardDemo" target="_blank" rel="noopener"><font color="#6495ED">Demo</font></a></p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143929.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前段时间偶然看到了天猫客户端有一个很贴心的功能，就是领取红包的时候，只要复制了一段特定信息，然后打开天猫的客户端，就会提醒你去领红包，如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143825.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然功能很简单，但是确实很贴心的为用户考虑。&lt;/p&gt;
&lt;p&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;整个功能的原理其实很简单的，就是使用了iOS剪切板&lt;code&gt;UIPasteboard&lt;/code&gt;。下面我们来细看一下这个类，来实现天猫客户端的这个功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143844.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看出创建&lt;code&gt;UIPasteboard&lt;/code&gt;实例有三个类方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;+ (UIPasteboard *)generalPasteboard;&lt;/code&gt;这个方法是获取通用的剪切板实例，就是所有的应用程序都可以访问的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;+ (UIPasteboard *)pasteboardWithName:(NSString *)pasteboardName create:(BOOL)create;&lt;/code&gt;这个方法是通过’pasteboardName’获取剪切板，如果没有我们可以指定是否创建；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;+ (UIPasteboard *)pasteboardWithUniqueName;&lt;/code&gt;创建一个唯一的剪切板，有系统命名的，名字我们可以通过&lt;code&gt;pasteboard.name&lt;/code&gt;来获取。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要实现天猫这样的功能，我们使用只能使用&lt;code&gt;+ (UIPasteboard *)generalPasteboard;&lt;/code&gt;来获取剪切板实例。我们可以在&lt;code&gt;AppDelegate.m&lt;/code&gt;中的&lt;code&gt;- (void)applicationDidBecomeActive:(UIApplication *)application&lt;/code&gt;方法中加入获取剪切板内容的代码，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIPasteboard&lt;/span&gt; *pasteboard = [&lt;span class=&quot;built_in&quot;&gt;UIPasteboard&lt;/span&gt; generalPasteboard];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([pasteboard.string isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;123&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[[&lt;span class=&quot;built_in&quot;&gt;UIAlertView&lt;/span&gt; alloc] initWithTitle:&lt;span class=&quot;string&quot;&gt;@&quot;Tips&quot;&lt;/span&gt; message:[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;剪切板的信息是%@，可以去领红包了&quot;&lt;/span&gt;,pasteboard.string] delegate:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; cancelButtonTitle:&lt;span class=&quot;string&quot;&gt;@&quot;确定&quot;&lt;/span&gt; otherButtonTitles:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;] show];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了   这个功能就完成了，就是这么简单，看一下效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143907.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h3&gt;&lt;p&gt;iOS系统中，&lt;code&gt;UITextField&lt;/code&gt;、&lt;code&gt;UITextView&lt;/code&gt;和&lt;code&gt;UIWebView&lt;/code&gt;默认是可以使用剪切板的，如果其他的UI控件使用剪切板的话，就需要自己处理了，下面我们给&lt;code&gt;UILabel&lt;/code&gt;和&lt;code&gt;UIImageView&lt;/code&gt;添加剪切板。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.luobbe.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 自定义数字键盘</title>
    <link href="http://blog.luobbe.com/2015/08/28/ios-zi-ding-yi-shu-zi-jian-pan/"/>
    <id>http://blog.luobbe.com/2015/08/28/ios-zi-ding-yi-shu-zi-jian-pan/</id>
    <published>2015-08-28T10:21:44.000Z</published>
    <updated>2015-09-22T06:20:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要自定义数字键盘，系统不是有数字键盘吗？可能你会有这样的疑问，当你碰到财务类型的App时，一般都会要求金额保留到小数点的后两位，其实系统的数字键盘利用通知也可以添加小数点和完成键，但是局限性还是很大，比如产品经理让自己公司的Logo为键盘的背景，这是就需要完全自定义了。也正是因为可恶的产品经理各种要求，我才忍不住想要写一个自己的数字键盘，想怎么修改就怎么修改，应付各种需求。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143754.png" alt=""></p><p>下面就简单的介绍下使用吧。<br><a id="more"></a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>本文的自定义数字键盘的原理就是自定义一个<code>LBNumberKeyboardView</code>来代替<code>UITextField</code>的<code>inputView</code>，使用很简单，引入头文件，代码如下：</p><p>1.创建带小数点的数字键盘(最多保留小数点后两位)：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LBNumberKeyboardView *lbTop = [[LBNumberKeyboardView alloc] initWithFrame:<span class="built_in">CGRectZero</span>];</span><br><span class="line">lbTop.textField = _textFieldTop;</span><br></pre></td></tr></table></figure></p><p>2.创建用完成代替小数点的数字键盘：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LBNumberKeyboardView *lbBottom = [[LBNumberKeyboardView alloc] initWithFrame:<span class="built_in">CGRectZero</span>];</span><br><span class="line">[lbBottom changeDotToDone];</span><br><span class="line">lbBottom.textField = _textFieldBottom;</span><br></pre></td></tr></table></figure><p>完成，使用就是这么简单。本文<a href="https://github.com/lovels/LBNumberKeyboard" target="_blank" rel="noopener"><font color="#6495ED">Demo</font></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么要自定义数字键盘，系统不是有数字键盘吗？可能你会有这样的疑问，当你碰到财务类型的App时，一般都会要求金额保留到小数点的后两位，其实系统的数字键盘利用通知也可以添加小数点和完成键，但是局限性还是很大，比如产品经理让自己公司的Logo为键盘的背景，这是就需要完全自定义了。也正是因为可恶的产品经理各种要求，我才忍不住想要写一个自己的数字键盘，想怎么修改就怎么修改，应付各种需求。&lt;/p&gt;
&lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143754.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面就简单的介绍下使用吧。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.luobbe.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 8  Touch ID指纹识别</title>
    <link href="http://blog.luobbe.com/2015/08/19/ios-touchid/"/>
    <id>http://blog.luobbe.com/2015/08/19/ios-touchid/</id>
    <published>2015-08-19T13:48:08.000Z</published>
    <updated>2015-09-22T06:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前段时间项目中使用了Touch ID解锁登陆，顺便就整理了一下。Touch ID 只支持iOS8、iPhone 5s以上的系统和设备，使用时需要引入 <code>LocalAuthentication.framework</code>,首先我们可以看一下这个库里面有什么东西：<br><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143054.png" alt=""></p><p>比较简单，主要使用的就是LAContext这个类中的API。<br><br>要想使用Touch ID，第一步我们需要系统询问，看看当前的设备能不能使用。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)evaluatePolicy:(LAPolicy)policy</span><br><span class="line">       localizedReason:(<span class="built_in">NSString</span> *)localizedReason</span><br><span class="line">                 reply:(<span class="keyword">void</span>(^)(<span class="built_in">BOOL</span> success, <span class="built_in">NSError</span> *error))reply;</span><br></pre></td></tr></table></figure><p>这个函数就是询问系统当前的设备能不能使用Touch ID，能使用 return YES,反之return NO;我在使用Touch Id的时候，我创建了一个工具类<code>LBTouchId</code>,里面包含了判断Touch Id是否可用的类方法<code>+ (BOOL)checkTouchIDUsable</code>和验证指纹是否正确的类方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)verifyTouchIdWithLocalizedFallbackTitle:(<span class="built_in">NSString</span> *)fallbackTitle</span><br><span class="line">                                       callBack:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span> result, <span class="built_in">NSError</span> *error))block</span><br></pre></td></tr></table></figure><p>判断是否可用的实现方式如下<a id="more"></a>：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)checkTouchIDUsable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(CurrentIOS8)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LAContext *context = [[LAContext alloc] init];</span><br><span class="line">    <span class="built_in">NSError</span> *error;</span><br><span class="line">    <span class="built_in">BOOL</span> usable = [context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error];</span><br><span class="line">    <span class="keyword">return</span> usable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当系统返回YES的时候，我们就需要验证指纹的正确性了，接下来就看一下实现的方式：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)verifyTouchIdWithLocalizedFallbackTitle:(<span class="built_in">NSString</span> *)fallbackTitle</span><br><span class="line">                                       callBack:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span> result, <span class="built_in">NSError</span> *error))block</span><br><span class="line">&#123;</span><br><span class="line">    LAContext *context = [[LAContext alloc] init];</span><br><span class="line">    context.localizedFallbackTitle = fallbackTitle;</span><br><span class="line">    [context evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics localizedReason:<span class="string">@"请验证已有指纹"</span></span><br><span class="line">                      reply:^(<span class="built_in">BOOL</span> success, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            block(success,error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们运行，可以看到如下界面：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143120.png" alt=""></p><p>其中<code>localizedReason</code>可以是开发者自己指定的，如果验证失败，会出现下图：</p><p><img src="https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143219.png" alt=""></p><p>其中<code>localizedFallbackTitle</code>也是开发者自己指定的，如果为空字符串，就不会显示这个按钮，只显示一个”取消”按钮，当用户点击对应的按钮，都是有回调的，可以根据具体情况做处理。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好了,Touch ID的基本使用就全部结束了，比较简单，本文的<a href="https://github.com/luobbe/TouchIDDemo" target="_blank" rel="noopener"><font color="#6495ED">Demo</font></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前段时间项目中使用了Touch ID解锁登陆，顺便就整理了一下。Touch ID 只支持iOS8、iPhone 5s以上的系统和设备，使用时需要引入 &lt;code&gt;LocalAuthentication.framework&lt;/code&gt;,首先我们可以看一下这个库里面有什么东西：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lovels/BlogResources/master/img/20200409143054.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;比较简单，主要使用的就是LAContext这个类中的API。&lt;br&gt;&lt;br&gt;要想使用Touch ID，第一步我们需要系统询问，看看当前的设备能不能使用。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)evaluatePolicy:(LAPolicy)policy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       localizedReason:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)localizedReason&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 reply:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^)(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; success, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error))reply;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个函数就是询问系统当前的设备能不能使用Touch ID，能使用 return YES,反之return NO;我在使用Touch Id的时候，我创建了一个工具类&lt;code&gt;LBTouchId&lt;/code&gt;,里面包含了判断Touch Id是否可用的类方法&lt;code&gt;+ (BOOL)checkTouchIDUsable&lt;/code&gt;和验证指纹是否正确的类方法&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)verifyTouchIdWithLocalizedFallbackTitle:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)fallbackTitle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       callBack:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; result, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error))block&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;判断是否可用的实现方式如下
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.luobbe.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.luobbe.com/2015/08/17/hello-world/"/>
    <id>http://blog.luobbe.com/2015/08/17/hello-world/</id>
    <published>2015-08-17T14:06:16.000Z</published>
    <updated>2018-01-02T08:42:33.579Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://blog.luobbe.com/tags/hexo/"/>
    
  </entry>
  
</feed>
